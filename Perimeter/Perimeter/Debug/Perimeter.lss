
Perimeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058c  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d9  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033a  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	3d c0       	rjmp	.+122    	; 0x7e <__vector_1>
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	c1 c0       	rjmp	.+386    	; 0x18c <__vector_4>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	72 c0       	rjmp	.+228    	; 0x110 <StateTransition+0x18>
  2c:	7d c0       	rjmp	.+250    	; 0x128 <StateTransition+0x30>
  2e:	88 c0       	rjmp	.+272    	; 0x140 <StateTransition+0x48>
  30:	8d c0       	rjmp	.+282    	; 0x14c <StateTransition+0x54>
  32:	92 c0       	rjmp	.+292    	; 0x158 <StateTransition+0x60>
  34:	97 c0       	rjmp	.+302    	; 0x164 <StateTransition+0x6c>
  36:	9c c0       	rjmp	.+312    	; 0x170 <StateTransition+0x78>

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf ed       	ldi	r28, 0xDF	; 223
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	e8 ed       	ldi	r30, 0xD8	; 216
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 36       	cpi	r26, 0x62	; 98
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	20 e0       	ldi	r18, 0x00	; 0
  58:	a2 e6       	ldi	r26, 0x62	; 98
  5a:	b0 e0       	ldi	r27, 0x00	; 0
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a3 36       	cpi	r26, 0x63	; 99
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	39 d0       	rcall	.+114    	; 0xda <main>
  68:	b5 c0       	rjmp	.+362    	; 0x1d4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <TimerInit>:

// Function for initializing Timer1
//
void TimerInit(void)
{
	TIMSK   = 0b01000000; // Allow Timer1 interrupt compared with OCR1A (H and L - High bits and Low bits) 
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	89 bf       	out	0x39, r24	; 57
	
	// Set value to compare for interrupt (31250)
	// 
	OCR1AH  = 0b01111010; 
  70:	8a e7       	ldi	r24, 0x7A	; 122
  72:	8b bd       	out	0x2b, r24	; 43
	OCR1AL  = 0b00010010;
  74:	82 e1       	ldi	r24, 0x12	; 18
  76:	8a bd       	out	0x2a, r24	; 42
	
    TCCR1B  = T1; // Set prescaler
  78:	8c e0       	ldi	r24, 0x0C	; 12
  7a:	8e bd       	out	0x2e, r24	; 46
  7c:	08 95       	ret

0000007e <__vector_1>:


// Perimeter crossing handler
// 
ISR(INT0_vect)
{	
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
	// Need to check if it's evening 
	//  
	if(PIND&(1<<PIND4)) 
  8a:	84 9b       	sbis	0x10, 4	; 16
  8c:	08 c0       	rjmp	.+16     	; 0x9e <__vector_1+0x20>
	{
		GIMSK  = 0b10000000; // Off signalization handler 
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	8b bf       	out	0x3b, r24	; 59
		state  = RING_ON;	 // Hyperstate entry
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		TCCR1B = T2;		 // Set new prescaler
  98:	8b e0       	ldi	r24, 0x0B	; 11
  9a:	8e bd       	out	0x2e, r24	; 46
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <__vector_1+0x26>
	
	// System must be off afternoon 
	//
	else
	{
		state = START;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	
	sei();
  a4:	78 94       	sei
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_2>:


// Signalization off handler
//
ISR(INT1_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	GIMSK  = 0b01000000; // Allow to use Perimeter crossing handler again
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	8b bf       	out	0x3b, r24	; 59
	state  = FIRST_ON;	 // Reload system 
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	TCCR1B = T1;		 // Set default prescaler
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	8e bd       	out	0x2e, r24	; 46
	
	sei();
  cc:	78 94       	sei
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:

// Main function initializes all registers, inputs and outputs
// 
int main(void)
{
	GIMSK = 0b11000000; // Allow to use Perimeter crossing and Signalization off handlers
  da:	80 ec       	ldi	r24, 0xC0	; 192
  dc:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0b00001111; // Set special instructions for handlers working only if input has logic '1'
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	85 bf       	out	0x35, r24	; 53
	TimerInit();		// Call Timer1 initialization
  e2:	c4 df       	rcall	.-120    	; 0x6c <TimerInit>
	
	// Control logic level in all pins
	// 0 - zero logic level; 1 - logic level is one
	//
	PortReset(PORTB); 
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	18 ba       	out	0x18, r1	; 24
	PORTD = 0b0011100;
  e8:	8c e1       	ldi	r24, 0x1C	; 28
  ea:	82 bb       	out	0x12, r24	; 18
	
	// Set input and output roles
	// 
	DDRD = 0b1100011;  // D4-D3-D2 is input
  ec:	83 e6       	ldi	r24, 0x63	; 99
  ee:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00011111; // B5-B0 is output
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	87 bb       	out	0x17, r24	; 23

	sei();
  f4:	78 94       	sei
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stack+0x17>

000000f8 <StateTransition>:

// FSM working process function
//
void StateTransition(void)
{
	switch(state)
  f8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
  fc:	8e 2f       	mov	r24, r30
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	e7 30       	cpi	r30, 0x07	; 7
 106:	f1 05       	cpc	r31, r1
 108:	b8 f5       	brcc	.+110    	; 0x178 <StateTransition+0x80>
 10a:	eb 5e       	subi	r30, 0xEB	; 235
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	09 94       	ijmp
	{
		case START:
		
			PortReset(PORTB); // Reset all LED's
 110:	88 b3       	in	r24, 0x18	; 24
 112:	18 ba       	out	0x18, r1	; 24

			// Check if it's evening
			//				
			if(PIND&(1<<PIND4))
 114:	84 9b       	sbis	0x10, 4	; 16
 116:	04 c0       	rjmp	.+8      	; 0x120 <StateTransition+0x28>
			{
				nextState = FIRST_ON; 
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 11e:	31 c0       	rjmp	.+98     	; 0x182 <StateTransition+0x8a>
			}
		
			else
			{
				nextState = START;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 126:	2d c0       	rjmp	.+90     	; 0x182 <StateTransition+0x8a>
		case FIRST_ON:
		
			// Need to check one more time
			// if the system has stable signal from sensor
			//
			if(PIND&(1<<PIND4))
 128:	84 9b       	sbis	0x10, 4	; 16
 12a:	06 c0       	rjmp	.+12     	; 0x138 <StateTransition+0x40>
			{
				PORTB = 0b00000001; // Set appropriate checking LED 
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	88 bb       	out	0x18, r24	; 24
				nextState = SECOND_ON;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 136:	25 c0       	rjmp	.+74     	; 0x182 <StateTransition+0x8a>
			}
		
			else
			{
				nextState = START;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 13e:	21 c0       	rjmp	.+66     	; 0x182 <StateTransition+0x8a>
			}
			
		break;
		
		case SECOND_ON:
			PORTB = 0b00000010;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	88 bb       	out	0x18, r24	; 24
			nextState = THIRD_ON;
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		break;
 14a:	1b c0       	rjmp	.+54     	; 0x182 <StateTransition+0x8a>
		
		case THIRD_ON:
			PORTB = 0b00000100;
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	88 bb       	out	0x18, r24	; 24
			nextState = FOURTH_ON;
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		break;
 156:	15 c0       	rjmp	.+42     	; 0x182 <StateTransition+0x8a>
		
		case FOURTH_ON:
			PORTB = 0b00001000;
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	88 bb       	out	0x18, r24	; 24
			nextState = FIRST_ON;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		break;
 162:	0f c0       	rjmp	.+30     	; 0x182 <StateTransition+0x8a>
		
		// Hyperstate 
		
			case RING_ON:
				PORTB = 0b00011111; //Enable all LED's and singalization
 164:	8f e1       	ldi	r24, 0x1F	; 31
 166:	88 bb       	out	0x18, r24	; 24
				nextState = RING_OFF;
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 16e:	09 c0       	rjmp	.+18     	; 0x182 <StateTransition+0x8a>
		
			case RING_OFF:
				nextState = RING_ON;
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 176:	05 c0       	rjmp	.+10     	; 0x182 <StateTransition+0x8a>
		
		// For avoiding all collapse
		// need to set default state
		//
		default:
			PortReset(PORTB);
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	18 ba       	out	0x18, r1	; 24
			nextState = START;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		break;
	}
	
	state = nextState;
 182:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 18a:	08 95       	ret

0000018c <__vector_4>:


// Timer1 overflow interrupt handler 
//             
ISR (TIMER1_COMPA_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	sei();				// Allow all interrupts 
 1ae:	78 94       	sei
	StateTransition();  // Start FSM
 1b0:	a3 df       	rcall	.-186    	; 0xf8 <StateTransition>
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
